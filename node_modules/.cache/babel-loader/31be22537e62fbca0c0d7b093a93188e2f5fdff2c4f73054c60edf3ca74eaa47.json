{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { registerUser, loginUser, authUser, logoutUser } from \"./thunkFunctions\";\nimport { toast } from \"react-toastify\";\nconst initialState = {\n  userData: {\n    id: \"\",\n    password: \"\"\n  },\n  isAuth: false,\n  isLoading: false,\n  error: \"\"\n};\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n    // 회원가입\n    .addCase(registerUser.pending, state => {\n      state.isLoading = true;\n    }).addCase(registerUser.fulfilled, state => {\n      state.isLoading = false;\n      toast.info(\"회원가입을 성공했습니다.\");\n    }).addCase(registerUser.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n      toast.error(action.payload);\n    })\n\n    // 로그임\n    .addCase(loginUser.pending, state => {\n      state.isLoading = true;\n    }).addCase(loginUser.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.userData = action.payload.user;\n      state.isAuth = true;\n      toast.info(\"로그인에 성공하였습니다.\");\n      localStorage.setItem(\"accessToken\", action.payload.accessToken);\n    }).addCase(loginUser.rejected, (state, action) => {\n      state.isLoading = true;\n      toast.error(action.payload || \"로그인에 실패했습니다.\");\n    }).addCase(authUser.pending, state => {\n      state.isLoading = true;\n    }).addCase(authUser.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.userData = action.payload;\n      state.isAuth = true;\n    }).addCase(authUser.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n      state.userData = initialState.userData;\n      state.isAuth = false;\n      localStorage.removeItem(\"accessToken\");\n    })\n\n    // 로그아웃\n    .addCase(logoutUser.pending, state => {\n      state.isLoading = true;\n    }).addCase(logoutUser.fulfilled, state => {\n      state.isLoading = false;\n      state.userData = initialState.userData;\n      state.isAuth = false;\n      toast.info(\"로그아웃을 완료했습니다.\");\n      localStorage.removeItem(\"accessToken\");\n    }).addCase(logoutUser.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n      toast.error(action.payload);\n    });\n  }\n});\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","registerUser","loginUser","authUser","logoutUser","toast","initialState","userData","id","password","isAuth","isLoading","error","userSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","info","rejected","action","payload","user","localStorage","setItem","accessToken","removeItem","reducer"],"sources":["/Users/hagahyeong/Documents/public-FE/src/redux/userSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\nimport {\n  registerUser,\n  loginUser,\n  authUser,\n  logoutUser,\n} from \"./thunkFunctions\";\nimport { toast } from \"react-toastify\";\n\nconst initialState = {\n  userData: {\n    id: \"\",\n    password: \"\",\n  },\n  isAuth: false,\n  isLoading: false,\n  error: \"\",\n};\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      // 회원가입\n      .addCase(registerUser.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(registerUser.fulfilled, (state) => {\n        state.isLoading = false;\n        toast.info(\"회원가입을 성공했습니다.\");\n      })\n      .addCase(registerUser.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload;\n        toast.error(action.payload);\n      })\n\n      // 로그임\n      .addCase(loginUser. pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(loginUser.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.userData = action.payload.user;\n        state.isAuth = true;\n        toast.info(\"로그인에 성공하였습니다.\");\n        localStorage.setItem(\"accessToken\", action.payload.accessToken);\n      })\n      .addCase(loginUser.rejected, (state, action) => {\n        state.isLoading = true;\n        toast.error(action.payload || \"로그인에 실패했습니다.\");\n      })\n      .addCase(authUser. pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(authUser.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.userData = action.payload;\n        state.isAuth = true;\n      })\n      .addCase(authUser.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload;\n        state.userData = initialState.userData;\n        state.isAuth = false;\n        localStorage.removeItem(\"accessToken\");\n      })\n\n      // 로그아웃\n      .addCase(logoutUser.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(logoutUser.fulfilled, (state) => {\n        state.isLoading = false;\n        state.userData = initialState.userData;\n        state.isAuth = false;\n        toast.info(\"로그아웃을 완료했습니다.\");\n        localStorage.removeItem(\"accessToken\");\n      })\n      .addCase(logoutUser.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload;\n        toast.error(action.payload);\n      });\n  },\n});\n\nexport default userSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}